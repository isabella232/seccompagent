apiVersion: v1
kind: Namespace
metadata:
  name: seccomp-agent
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: seccomp-agent
  namespace: seccomp-agent
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: seccomp-agent
subjects:
- kind: ServiceAccount
  name: seccomp-agent
  namespace: seccomp-agent
roleRef:
  kind: ClusterRole
  name: view
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: seccomp-agent-rego
  namespace: seccomp-agent
data:
  policies.rego: |
    package syscall.authz

    action[{"passthrough": passthrough, "reason": reason}] {
        input.syscall = "execve"

        passthrough := true
        reason := "execve are always accepted"
    }
    action[{"handler": handler, "reason": reason, "suffix": suffix}] {
        input.syscall = "mkdir"
        input.pod.namespace = "default"
        input.pod.name = "mynotifypod"
        startswith(input.arg0, "foo")

        handler := "mkdir"
        reason := "directories can start with foo"
        suffix := "-{{.Namespace}}-{{.Pod}}-{{.Container}}"
    }
    action[{"handler": handler, "reason": reason, "suffix": suffix}] {
        input.syscall = "mkdir"
        input.pod.namespace = "default"
        input.pod.name = "mynotifypod"
        endswith(input.arg0, "bar")

        handler := "mkdir"
        reason := "directories can end with bar"
        suffix := "-{{.Namespace}}-{{.Pod}}-{{.Container}}"
    }
    action[{"handler": handler, "reason": reason}] {
        input.syscall = "mount"
        allowedfs := {"proc", "tmpfs"}
        allowedfs[input.arg2]
        input.pod.namespace = "default"
        input.pod.name = "mynotifypod"

        handler := "mount"
        reason := "mounting specific filesystems is allowed"
    }
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: seccomp-agent
  namespace: seccomp-agent
  labels:
    k8s-app: seccomp-agent
spec:
  selector:
    matchLabels:
      k8s-app: seccomp-agent
  template:
    metadata:
      labels:
        k8s-app: seccomp-agent
    spec:
      serviceAccount: seccomp-agent
      hostPID: true
      containers:
      - name: seccomp-agent
        #image: quay.io/kinvolk/seccompagent:alban_opa
        image: local-seccomp-agent
        #imagePullPolicy: Always
        imagePullPolicy: Never
        command: [ "/bin/seccompagent", "-resolver=opa", "-log=trace" ]
        env:
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
        securityContext:
          capabilities:
            add:
            # CAP_SYS_PTRACE is useful to read arguments of a processes with
            # the prctl PR_SET_DUMPABLE bit set to zero.
            - "SYS_PTRACE"
            # CAP_SYS_ADMIN is useful to setns in containers and mount
            - "SYS_ADMIN"
            - "NET_ADMIN"
          # privileged: true
        volumeMounts:
        - name: seccomp-policies
          mountPath: /host/seccomp
        - name: run
          mountPath: /run
        - name: seccomp-agent-rego
          mountPath: /etc/seccomp-agent
      tolerations:
      - effect: NoSchedule
        operator: Exists
      - effect: NoExecute
        operator: Exists
      volumes:
      - name: seccomp-policies
        hostPath:
          path: /var/lib/kubelet/seccomp
      - name: run
        hostPath:
          path: /run
      - name: seccomp-agent-rego
        configMap:
          name: seccomp-agent-rego
